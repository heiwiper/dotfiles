# -*- mode: org ; mode: stumpwm -*-
#+title: StumpWM Configuration
#+author: Abdallah Maouche
#+PROPERTY: header-args:lisp :tangle ./init.lisp

* Prerequisites
#+begin_src lisp
  ;; -*- mode: stumpwm -*-

  (in-package :stumpwm)
#+end_src

* Startup

** X configuration
#+begin_src lisp
  (run-shell-command "sh ~/.xprofile")
#+end_src

** Applications
#+begin_src lisp
  (run-shell-command "flameshot &")
  (run-shell-command "nextcloud &")
  (run-shell-command "kdeconnect-indicator &")
  (run-shell-command "nm-applet &")
  (run-shell-command "blueman-applet &")
#+end_src

* Modeline
#+begin_src lisp
  (mode-line)
  (setf stumpwm:*window-format* "%m%n%s%c")
  (setf *time-modeline-string* "%A %d %b %H:%M")

  (setf stumpwm:*screen-mode-line-format*
	(list "^(:bg \"#5fafd7\")"
	      " %h "
	      "^n"
	      " ^f1❧^f0"
	      "^(:fg \"#ff8700\")"
	      "%w"
	      "^(:>)^n"
	      " ^f1☙^f0 "
	      "^(:bg \"#4e4e4e\")^(:fg \"#ffafd7\")"
	      " ^f1▣︎^f0 %C"
	      "^(:bg \"#4e4e4e\")^(:fg \"#ff4ea3\")"
	      "  ^f1⌸^f0%M "
	      "^(:bg \"#a1db00\")^(:fg \"#4e4e4e\")"
	      '(:eval (concat " ^f3৸^f0 "
		       (string-right-trim '(#\Newline)
			(run-shell-command "echo $(upower -d | grep --max-count=2 'percentage' | awk '{print $2}' | tr '\n' ' ')" t))
		       " "))
	      ;; " %B "
	      "^(:bg \"#ffafd7\")^(:fg \"#4e4e4e\")"
	      '(:eval (concat " ^f2♪^f0 "
		       (string-right-trim '(#\Newline)
			(run-shell-command "pamixer --get-volume" t))
		       " "))
	      "^(:bg \"#303030\")^(:fg \"#c4a000\")"
	      " ^f1❦^f0 %d "
	      "^n"
	      " %T"))
#+end_src


* Theme

** Colors
#+begin_src lisp
  (defconstant +moe-black+ "#303030")
  (defconstant +moe-gray+  "#6c6c6c")
  (defconstant +moe-white+ "#c6c6c6")
  (defconstant +moe-blue+ "#5fafd7")
  (defconstant +moe-cyan+ "#00d7af")
  (defconstant +moe-green+ "#a1db00")
  (defconstant +moe-yellow+ "#c4a000")
  (defconstant +moe-pink+ "#ffafd7")
  (defconstant +moe-orange+ "#ff8700")
  (defconstant +moe-red+ "#ff4b4b")
  (setf *colors* (list +moe-black+
		       ,+moe-red+
		       ,+moe-green+
		       ,+moe-yellow+
		       ,+moe-blue+
		       ,+moe-pink+
		       ,+moe-cyan+
		       ,+moe-white+
		       ,+moe-gray+
		       ,+moe-orange+))
  (update-color-map (current-screen))
#+end_src

** Window
#+begin_src lisp
  (set-win-bg-color +moe-cyan+)
  (set-focus-color +moe-orange+)
  (set-unfocus-color +moe-gray+)
  (set-float-focus-color +moe-cyan+)
  (setf stumpwm:*maxsize-border-width* 2)
  (setf stumpwm:*normal-border-width* 2)
  (setf stumpwm:*window-border-style* ":thin")
#+end_src

** Message and input bar
#+begin_src lisp
  (set-fg-color +moe-white+)
  (set-bg-color +moe-black+)
  (set-border-color +moe-orange+)
  (set-msg-border-width 1)
  (setf *message-window-padding* 5)
  (setf *message-window-y-padding* 2)
  (setf *message-window-gravity* :top)
  (setf *input-window-gravity* :top)
  (setf *message-window-input-gravity* :center)
#+end_src

** Modeline
#+begin_src lisp
  (setf *mode-line-foreground-color* +moe-white+)
  (setf *mode-line-background-color* +moe-gray+)
  (setf *mode-line-border-color* +moe-gray+)
#+end_src

* Keys

** Prefix key
#+begin_src lisp
  (set-prefix-key (kbd "F20"))
#+end_src

** Media keys
#+begin_src lisp
  (defvar *my-media-keymap*
    (let ((m (make-sparse-keymap)))
      (define-key *top-map* (kbd "XF86AudioMute")
	"exec amixer -q sset Master 1+ toggle")
      (define-key *top-map* (kbd "XF86AudioRaiseVolume")
	"exec amixer -q sset Master 10%+")
      (define-key *top-map* (kbd "XF86AudioLowerVolume")
	"exec amixer -q sset Master 10%-")
      (define-key *top-map* (kbd "XF86AudioMicMute")
	"exec amixer -q sset Capture 1+ toggle")
      (define-key *top-map* (kbd "XF86MonBrightnessUp")
	"exec light -A 10")
      (define-key *top-map* (kbd "XF86MonBrightnessDown")
	"exec light -U 10")
      (define-key *root-map* (kbd ",")
	"exec playerctl previous")
      (define-key *root-map* (kbd ".")
	"exec playerctl next")
      (define-key *root-map* (kbd "/")
	"exec playerctl play-pause")))
#+end_src

* Commands

** Power management
#+begin_src lisp
  (defcommand suspend () ()
    (run-shell-command "systemctl suspend"))

  (defcommand hibernate () ()
    (run-shell-command "systemctl hibernate"))
#+end_src


* Modules

** stumptray
#+begin_src lisp
  (load-module "stumptray")
  (stumptray::stumptray)
#+end_src

** mem
#+begin_src lisp
  (load-module "mem")
  (setf mem::*mem-modeline-fmt* " %a")
#+end_src

** cpu
#+begin_src lisp
  (load-module "cpu")
  (setf cpu::*cpu-usage-modeline-fmt* "^[~A~1D%^]")
  (setf cpu:*cpu-modeline-fmt* "%c")
  (setf cpu::*cpu-temp-hi* 100)
  (setf cpu::*cpu-temp-med* 100)
  (setf cpu::*cpu-temp-crit* 100)
#+end_src

** hostname
#+begin_src lisp
  (load-module "hostname")
#+end_src
#+end_src

** battery-portable
#+begin_src lisp
  (load-module "battery-portable")
#+end_src

** maildir
#+begin_src lisp
  ;; (load-module "maildir")
  ;; (push (cons "Job" (realname "~/Mail/Inbox/")) maildir:*maildir-alist*)
#+end_src

** ttf-fonts
#+begin_src lisp
  (load-module "ttf-fonts")
  (xft:cache-fonts)
  (set-font (make-instance 'xft:font
			      :family "Noto Sans Mono"
			      :subfamily "Regular"
			      :size 11
			      :antialias t))
#+end_src

** disk
#+begin_src lisp
  (load-module "disk")
  (setf disk:*disk-modeline-fmt* "%a")
#+end_src

** swm-gaps
#+begin_src lisp
  (load-module "swm-gaps")
  (setf swm-gaps:*head-gaps-size* 0)
  (setf swm-gaps:*outer-gaps-size* 20)
  (setf swm-gaps:*inner-gaps-size* 5)
#+end_src

