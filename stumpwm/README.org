# -*- mode: org ; mode: stumpwm -*-
#+title: StumpWM Configuration
#+author: Abdallah Maouche
#+PROPERTY: header-args:lisp :tangle ./init.lisp

* Prerequisites
#+begin_src lisp
  ;; -*- mode: stumpwm -*-

  (in-package :stumpwm)
#+end_src

* Startup

** X configuration
#+begin_src lisp
  (run-shell-command "sh ~/.xprofile")
#+end_src

** Applications
#+begin_src lisp
  (run-shell-command "flameshot &")
  (run-shell-command "nextcloud &")
  (run-shell-command "kdeconnect-indicator &")
  (run-shell-command "nm-applet &")
  (run-shell-command "blueman-applet &")
#+end_src

* Modeline
#+begin_src lisp
  (mode-line)
  (setf stumpwm:*window-format* "%m%n%s%c")
  (setf stumpwm:*screen-mode-line-format*
	  (list "[%B] -- [ %D] -- %w -- "
		'(:eval (stumpwm:run-shell-command "date" t))))
#+end_src


* Keys

** Prefix key
#+begin_src lisp
  (set-prefix-key (kbd "F20"))
#+end_src

** Media keys
#+begin_src lisp
  (defvar *my-media-keymap*
    (let ((m (make-sparse-keymap)))
      (define-key *top-map* (kbd "XF86AudioRaiseVolume")
	"exec amixer -q sset Master 10%+")
      (define-key *top-map* (kbd "XF86AudioLowerVolume")
	"exec amixer -q sset Master 10%-")
      (define-key *top-map* (kbd "XF86AudioMute")
	"exec amixer -q sset Master 1+ toggle")
      (define-key *top-map* (kbd "XF86AudioMicMute")
	"exec amixer -q sset Capture 1+ toggle")
      (define-key *top-map* (kbd "XF86MonBrightnessUp")
	"exec light -A 10")
      (define-key *top-map* (kbd "XF86MonBrightnessDown")
	"exec light -U 10")))
#+end_src

* Commands

** Power management
#+begin_src lisp
  (defcommand suspend () ()
    (run-shell-command "systemctl suspend"))

  (defcommand hibernate () ()
    (run-shell-command "systemctl hibernate"))
#+end_src


* Modules

** stumptray
#+begin_src lisp
  (load-module "stumptray")
  (stumptray::stumptray)
#+end_src

** battery-portable
#+begin_src lisp
  (load-module "battery-portable")
#+end_src

** maildir
#+begin_src lisp
  ;; (load-module "maildir")
  ;; (push (cons "Job" (realname "~/Mail/Inbox/")) maildir:*maildir-alist*)
#+end_src

** ttf-fonts
#+begin_src lisp
  (load-module "ttf-fonts")
  (xft:cache-fonts)
  (set-font (make-instance 'xft:font
			      :family "Noto Sans Mono"
			      :subfamily "Regular"
			      :size 11
			      :antialias t))
#+end_src

** disk
#+begin_src lisp
  (load-module "disk")
  (setf disk:*disk-modeline-fmt* "%a")
#+end_src

** swm-gaps
#+begin_src lisp
  (load-module "swm-gaps")
  (setf swm-gaps:*head-gaps-size* 0)
  (setf swm-gaps:*outer-gaps-size* 20)
  (setf swm-gaps:*inner-gaps-size* 5)
#+end_src

